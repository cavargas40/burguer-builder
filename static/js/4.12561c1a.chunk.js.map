{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Input/Input.js","shared/utility.js"],"names":["connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","props","useState","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","minLength","authForm","setAuthForm","isSignup","setIsSignUp","useEffect","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","event","controlName","updatedControls","target","checkValidity","inputChangedHandler","errorMessage","message","authRedirect","to","className","onSubmit","preventDefault","btnType","clicked","Input","inputElement","inputClasses","validationError","join","onChange","options","option","displayValue","label","rules","isValid","trim","length","maxLength"],"mappings":"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","file":"static/js/4.12561c1a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actions from '../../store/actions';\r\nimport './Auth.css';\r\nimport { checkValidity } from '../../shared/utility';\r\n\r\nconst Auth = props => {\r\n  const [authForm, setAuthForm] = useState({\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Mail Address'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        isEmail: true\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    password: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'password',\r\n        placeholder: 'Password'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 6\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    }\r\n  });\r\n\r\n  const [isSignup, setIsSignUp] = useState(true);\r\n\r\n  const inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = {\r\n      ...authForm,\r\n      [controlName]: {\r\n        ...authForm[controlName],\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          authForm[controlName].validation\r\n        ),\r\n        touched: true\r\n      }\r\n    };\r\n    setAuthForm(updatedControls);\r\n  };\r\n\r\n  const submitHandler = event => {\r\n    event.preventDefault();\r\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsSignUp(!isSignup);\r\n  };\r\n\r\n  const { onSetAuthRedirectPath, buildingBurger, auth } = props;\r\n\r\n  useEffect(() => {\r\n    if (!buildingBurger && auth !== '/') {\r\n      onSetAuthRedirectPath();\r\n    }\r\n  }, [onSetAuthRedirectPath, buildingBurger, auth]);\r\n\r\n  const formElementsArray = [];\r\n  for (let key in authForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: authForm[key]\r\n    });\r\n  }\r\n\r\n  let form = formElementsArray.map(formElement => (\r\n    <Input\r\n      key={formElement.id}\r\n      elementType={formElement.config.elementType}\r\n      elementConfig={formElement.config.elementConfig}\r\n      value={formElement.config.value}\r\n      invalid={!formElement.config.valid}\r\n      shouldValidate={formElement.config.validation}\r\n      touched={formElement.config.touched}\r\n      changed={event => inputChangedHandler(event, formElement.id)}\r\n    />\r\n  ));\r\n\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n\r\n  let errorMessage = null;\r\n  if (props.error) {\r\n    errorMessage = <p>{props.error.message}</p>;\r\n  }\r\n\r\n  let authRedirect = null;\r\n  if (props.isAuthenticated) {\r\n    authRedirect = <Redirect to={props.authRedirectPath} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Auth\">\r\n      {authRedirect}\r\n      {errorMessage}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button btnType=\"Success\">Submit</Button>\r\n      </form>\r\n      <Button btnType=\"Danger\" clicked={switchAuthModeHandler}>\r\n        Switch to {isSignup ? 'Signin' : 'Signup'}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = ['InputElement'];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push('Invalid');\r\n  }\r\n\r\n  let validationError = null;\r\n  if (props.invalid && props.touched) {\r\n    validationError = <p className=\"ValidationError\">Please enter a valid value!</p>;\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map(option => (\r\n            <option value={option.value} key={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Input\">\r\n      <label className=\"Label\">{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","export const checkValidity = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (!rules) {\r\n    return true;\r\n  }\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== '' && isValid;\r\n  }\r\n\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n"],"sourceRoot":""}