{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","shared/utility.js"],"names":["CheckoutSummary","props","className","style","width","margin","Burger","ingredients","Button","btnType","clicked","onCheckoutCancelled","onCheckoutContinued","connect","state","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderActions","withErrorHandler","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","key","push","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","orderData","map","formElement","Input","invalid","shouldValidate","changed","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","inputChangedHandler","disabled","Spinner","axios","purchased","summary","to","purchaseRedirect","history","goBack","replace","path","match","component","ContactData","inputElement","inputClasses","validationError","join","onChange","option","label","rules","isValid","trim","length"],"mappings":"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","file":"static/js/3.3c5bc535.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './CheckoutSummary.css';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst CheckoutSummary = props => {\r\n  return (\r\n    <div className=\"CheckoutSummary\">\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: '100%', margin: 'auto' }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.onCheckoutCancelled}>\r\n        Cancel\r\n      </Button>\r\n      <Button btnType=\"Danger\" clicked={props.onCheckoutContinued}>\r\n        Continue\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckoutSummary;\r\n","import React, { useState } from 'react';\r\nimport axios from '../../../axios-orders';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport './ContactData.css';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as orderActions from '../../../store/actions';\r\nimport { checkValidity } from '../../../shared/utility';\r\n\r\nconst ContactData = props => {\r\n  const [orderForm, setOrderForm] = useState({\r\n    name: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Your Name'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    street: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Your Street'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    zipCode: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'ZIP Code'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true,\r\n        minLength: 5,\r\n        maxLength: 5\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    country: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'text',\r\n        placeholder: 'Your Country'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Your Mail'\r\n      },\r\n      value: '',\r\n      validation: {\r\n        required: true\r\n      },\r\n      valid: false,\r\n      touched: false\r\n    },\r\n    deliveryMethod: {\r\n      elementType: 'select',\r\n      elementConfig: {\r\n        options: [\r\n          {\r\n            value: 'fastest',\r\n            displayValue: 'Fastests'\r\n          },\r\n          {\r\n            value: 'cheapest',\r\n            displayValue: 'Cheapest'\r\n          }\r\n        ]\r\n      },\r\n      value: 'fastest',\r\n      validation: {},\r\n      valid: true\r\n    }\r\n  });\r\n\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  const orderHandler = event => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n    }\r\n\r\n    const order = {\r\n      ingredients: props.ingredients,\r\n      price: props.price,\r\n      orderData: formData,\r\n      userId: props.userId\r\n    };\r\n\r\n    props.onOrderBurger(order, props.token);\r\n  };\r\n\r\n  const inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedOrderForm = {\r\n      ...orderForm\r\n    };\r\n    const updatedFormElement = { ...updatedOrderForm[inputIdentifier] };\r\n\r\n    updatedFormElement.value = event.target.value;\r\n    updatedFormElement.valid = checkValidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.touched = true;\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsValid(formIsValid);\r\n  };\r\n\r\n  const formElementsArray = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key]\r\n    });\r\n  }\r\n\r\n  let form = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map(formElement => (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          invalid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n          changed={event => inputChangedHandler(event, formElement.id)}\r\n        />\r\n      ))}\r\n      <Button btnType=\"Success\" disabled={!formIsValid}>\r\n        ORDER\r\n      </Button>\r\n    </form>\r\n  );\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n  return (\r\n    <div className=\"ContactData\">\r\n      <h4>Enter your Contact Data</h4>\r\n      {form}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onOrderBurger: (order, token) =>\r\n      dispatch(orderActions.purchaseBurger(order, token))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nconst Checkout = props => {\r\n  const onCheckoutCancelled = () => {\r\n    props.history.goBack();\r\n  };\r\n\r\n  const onCheckoutContinued = () => {\r\n    props.history.replace('/checkout/contact-data');\r\n  };\r\n\r\n  let summary = <Redirect to=\"/\" />;\r\n  const purchaseRedirect = props.purchased ? <Redirect to=\"/\" /> : null;\r\n  if (props.ingredients) {\r\n    summary = (\r\n      <div>\r\n        {purchaseRedirect}\r\n        <CheckoutSummary\r\n          ingredients={props.ingredients}\r\n          onCheckoutCancelled={onCheckoutCancelled}\r\n          onCheckoutContinued={onCheckoutContinued}\r\n        />\r\n        <Route\r\n          path={`${props.match.path}/contact-data`}\r\n          component={ContactData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return summary;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ingredients: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    purchased: state.order.purchased\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = props => {\r\n  let inputElement = null;\r\n  const inputClasses = ['InputElement'];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push('Invalid');\r\n  }\r\n\r\n  let validationError = null;\r\n  if (props.invalid && props.touched) {\r\n    validationError = <p className=\"ValidationError\">Please enter a valid value!</p>;\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map(option => (\r\n            <option value={option.value} key={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Input\">\r\n      <label className=\"Label\">{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","export const checkValidity = (value, rules) => {\r\n  let isValid = true;\r\n\r\n  if (!rules) {\r\n    return true;\r\n  }\r\n\r\n  if (rules.required) {\r\n    isValid = value.trim() !== '' && isValid;\r\n  }\r\n\r\n  if (rules.minLength) {\r\n    isValid = value.length >= rules.minLength && isValid;\r\n  }\r\n\r\n  if (rules.maxLength) {\r\n    isValid = value.length <= rules.maxLength && isValid;\r\n  }\r\n\r\n  return isValid;\r\n};\r\n"],"sourceRoot":""}